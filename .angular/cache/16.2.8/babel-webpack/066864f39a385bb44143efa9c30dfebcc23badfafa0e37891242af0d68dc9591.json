{"ast":null,"code":"import _asyncToGenerator from \"/Users/raphaelboullay/Documents/GitHub/Franime-mobile-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport { ImpactStyle, NotificationType } from './definitions';\nexport class HapticsWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.selectionStarted = false;\n  }\n  impact(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const pattern = _this.patternForImpact(options === null || options === void 0 ? void 0 : options.style);\n      _this.vibrateWithPattern(pattern);\n    })();\n  }\n  notification(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const pattern = _this2.patternForNotification(options === null || options === void 0 ? void 0 : options.type);\n      _this2.vibrateWithPattern(pattern);\n    })();\n  }\n  vibrate(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const duration = (options === null || options === void 0 ? void 0 : options.duration) || 300;\n      _this3.vibrateWithPattern([duration]);\n    })();\n  }\n  selectionStart() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.selectionStarted = true;\n    })();\n  }\n  selectionChanged() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (_this5.selectionStarted) {\n        _this5.vibrateWithPattern([70]);\n      }\n    })();\n  }\n  selectionEnd() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.selectionStarted = false;\n    })();\n  }\n  patternForImpact(style = ImpactStyle.Heavy) {\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n    return [61];\n  }\n  patternForNotification(type = NotificationType.Success) {\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n    return [35, 65, 21];\n  }\n  vibrateWithPattern(pattern) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n}\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}